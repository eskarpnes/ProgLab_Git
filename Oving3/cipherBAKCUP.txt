import string
from collections import OrderedDict
import random
from crypto_utils import modular_inverse as modInv, rabin_miller_is_prime as isPrime,generate_random_prime as randPrime, blocks_from_text as _blocks, text_from_blocks as _text
from tools import gcd
from itertools import product # used to make tuples of Affine cipher keys of uneven length lists (Hacker)

class Cipher:
	def __init__(self):
		self.LOW = 65 #32 #65
		self.HIGH = 91 #127 #91
		self.M = self.HIGH-self.LOW #95 (26 for the upper_ascii alphabet)
	def encode(self):
		pass
	def decode(self):
		pass
	def generate_keys(self):
		pass
	def verify(self, original, from_receiver):
		return original.lower() == from_receiver.lower()
		
class Caesar(Cipher):
	def __init__(self): # default key: 0
		super().__init__()
		
	def available_keys(self):
		return [i for i in range(self.M)]
		
	def generate_keys(self):
		return random.randint(1,self.M-1) #-1 to prevent full circle
		
	def encode(self, txt, key):
		encoded = ''
		# print ('Encoding ('+txt+')...')
		for c in txt:
			n = ord(c)
			# print (c,n,'->',(self.LOW + (n - self.LOW + key)%self.M),chr (self.LOW + (n - self.LOW + key)%self.M))
			encoded += chr (self.LOW + (n - self.LOW + key)%self.M)
		print (encoded)
		return encoded
		
	def decode(self, txt, key):
		decoded = ''
		# print ('Decoding '+txt+'...')
		for c in txt:
			n = ord(c)
			# print (c,n,'->',(self.LOW+(n - self.LOW - key)%self.M),chr (self.LOW + (n - self.LOW - key)%self.M))
			decoded += chr (self.LOW + (n - self.LOW - key)%self.M)
		print (decoded)
		return decoded


class Mult(Cipher):
	def __init__(self):
		super().__init__()
		self.primes = [i for i in range(0, self.M) if isPrime(i) and self.M % i != 0]
		
	def available_keys(self):
		return self.primes
		
	def generate_keys(self):
		return random.choice(self.primes)
		
	def encode(self, txt, key):
		encoded = ''
		# print ('Encoding ('+txt+')...',end='')
		print()
		for c in txt:
			n = ord(c)
			# print (c,n,'-->',(self.LOW + ((n - self.LOW) * key) % self.M),chr (self.LOW + ((n - self.LOW) * key) % self.M))
			encoded += chr (self.LOW + ((n - self.LOW) * key) % self.M)
		print (encoded)
		return encoded
		
	def decode(self, txt, key):
		decoded = ''
		# print ('Decoding '+txt+'...',end='')
		print()
		x = modInv(key, self.M)
		print ('finding a solving key...',x)
		for c in txt:
			n = ord(c)
			solved = self.LOW+ x*(n-self.LOW) % self.M
			# print (c,n,'->',chr(solved), solved)
			decoded += chr(solved)
		print (decoded)
		return decoded	
	
class Affine(Cipher):
	def __init__(self):
		super().__init__()
		self.mult = Mult()
		self.caesar = Caesar()
		
	def available_keys(self):
		# creating a list of tuples based on keys from mult and caesar
		a1 = self.mult.available_keys()
		a2 = self.caesar.available_keys()
		return list(product(a1, a2))
		
	def generate_keys(self):
		n1 = self.mult.generate_keys()
		n2 = self.caesar.generate_keys()
		return (n1,n2)
		
	def encode(self, txt, key):
		encoded = self.mult.encode(txt, key[0])
		encoded = self.caesar.encode(encoded, key[1])
		return encoded
		
	def decode(self, txt, key):
		decoded = self.caesar.decode(txt, key[1])
		decoded = self.mult.decode(decoded, key[0])
		return decoded
		
class Unbreakable(Cipher):
	def __init__(self):
		super().__init__()
		# pick a word as key from the "englishwords" file
		self.word_list = []
		with open ('englishwords.txt','r') as words:
			for i, word in enumerate(words):
				if i%100 == 0:  # picks line 100, 200, 300, ..., 9000!
					self.word_list.append(word.strip())
		words.close()
		# print (self.word_list)
		
	def available_keys(self):
		return self.word_list
		
	def generate_keys(self):
		return 'PIZZA'
		key = random.choice(self.word_list).upper()
		print ('Selected key:',key)
		return key
	
	def encode(self, txt, key):
		encoded = ''
		for i in range(len(txt)):
			c = txt[i]
			k = key[i % len(key)]
			sum = ord(c)+ord(k)
			# print (sum)
			sum = self.LOW + sum % self.M
			print (c, ord(c)-self.LOW,'\t->\t', k, ord(k)-self.LOW, '\t\tSum:\t',sum-self.LOW,'\t',chr(sum))
			encoded += chr(sum)
		print (encoded)
		return encoded
			
	def decode(self, txt, key):
		decrypt, decoded = '', ''
		print ('Finding decrypting key...', end = '')
		for c in key:
			print (c, ord(c)-self.LOW)
			new = (self.M - (ord(c)-self.LOW))%self.M
			decrypt += chr(new + self.LOW)
		print (decrypt)
		for i in range (len(txt)):
			decrypt_val = ord(decrypt[i % len(decrypt)]) - self.LOW
			txt_val = ord(txt[i]) - self.LOW
			new = (txt_val + decrypt_val) % self.M
			print (txt_val,'\t+\t',decrypt_val,'mod',self.M,'=\t',new,'\t->\t',new+self.LOW, chr (new + self.LOW))
			decoded += chr(new + self.LOW)
		print (decoded)
		return decoded

		
class RSA(Cipher):
	def __init__(self, key=2):
		super().__init__()
		
	def encode(self, txt, key): # change string to list of ints
		# print ('testing blocks:')
		# blk = _blocks(txt, 1)
		# print (blk)
		print ('Trying to decrypt',txt,'with key',key)
		nums = [ord(i) for i in txt]
		encoded = []
		for t in nums:
			c = pow(t, key[1], key[0])  # key [1] and key[0] represents (n, e)
			print ('encrypting',t,'...\tvalue =', c)
			encoded.append(c)
		print ('Encrypting finished!',encoded)
		return encoded
		
	def decode(self, numlist, key):
		# txt is a list of numbers
		decoded = []
		for c in numlist:
			t = pow(c, key[1], key[0])
			print ('decrypting',c,'...\tvalue =', t)
			decoded.append(t)
		decoded_string = ''.join(chr(i) for i in decoded)
		print ('Decrypting finished! The text is:', decoded_string)
		return decoded_string
		
	def generate_keys(self):
		print ('Generating keys for RSA')
		_bits = 8
		p, q = randPrime(_bits), randPrime(_bits)
		while (p == q):
			p = randPrime(3)
			q = randPrime(3)
		# print ('p =',p,', q =',q)
		n = p*q
		phi = (p-1) * (q-1)
		# an e that makes E and PHI coprime
		e = random.randrange(3, phi-1)
		# verify coprime-ness
		g = gcd(e, phi)
		while g != 1:
			e = random.randrange(3, phi-1)
			g = gcd(e, phi)
			
		d = modInv(e, phi)
		# self.public_key = (n, e)
		# self.private_key = (n, d)
		return ((n,e), (n,d)) #public, private
		
	# def RSA_keys(self, person):
		# _name = person.__class__.__name__
		# print (_name, 'is trying to access keys of RSA')
		# if _name == 'Sender':
			# print ('Giving sender the public key!', self.public_key)
			# return self.public_key
		# elif _name == 'Receiver':
			# print ('Giving receiver the private key!',self.private_key)
			# return self.private_key
